-------------------- Algorithm 1 Pseudocode: Target Terms or Substrings -------------------

parse text file to get the input cities and targets arrays
create output order array
create output word array
create temporary empty string
get the length of the concatenated string
create a index variable of type integer and intialize it to 0

while index < length:
    for every character in the concatenated string
        temp = temp + character
        if temp is a word in the targeted cities array
            add the index to the output order array
            save the word in output word array
            break out of the for loop to save time
    set temp variable back to empty string
    edit the concatenated string by taking away only the first char of the string
    increment index by 1

print output word array
return the output order array

-------------------- Algorithm 2 Pseudocode: Run Encoding Problem -------------------

create an empty output string
create an incrementing integer and set it to 0

while length of the input string > 0:
    create a counter integer variable and set it to 0
    while the incrementing integer is less than the length of the input string AND the current char is equal to next char
        increment the counter
        increment the incrementing integer
    output string is equal to it self and the concatenation of the counter and the first char of the input string
    if counter is greater than 1
        remove the first char of the input string
        decrement the incrementing integer by 1
    else if counter is equal to 1
        remove the first char of the input string

remove all the 1s in the output string
return the output string

-------------------- Algorithm 3 Pseudocode: Merging Techniques -------------------

create the output array
create two sub strings that we be checked to see if we are at the end of an input array

parse through the input file
    for every input array
        create a temp array to work with
        for every line in the file
            remove text that isn't required for sorting
            save text that would be sorted in temp array
        add temp array to output array

convert every string array in output array to an integer array

sort each array in the output array by ascendering order where negatives are first elements

return output array